# Key Ecological Attributes and Current Connectivity Status {-}

The planning team devised three Key Ecological Attributes (KEAs) and associated indicators to assess the current connectivity status of the watershed â€“ Accessible Off-channel Thermal Refuge, Accessible Spawning Habitat, and Accessible Rearing Habitat. KEAs are the key aspects of anadromous salmonid ecology that are being targeted by this WCRP. The connectivity status for the Anadromous Salmonids KEAs were used to establish goals to improve habitat connectivity in the watershed and will be the baseline against which progress is tracked over time.

The current connectivity status assessments for Accessible Spawning Habitat and Accessible Rearing habitat rely on GIS analyses to map known and modelled barriers to fish passage, identify stream reaches that have potential spawning and rearing habitat, estimate the proportion of habitat that is currently accessible to target species, and prioritize barriers for field assessment that would provide the greatest gains in connectivity. To support a flexible prioritization framework to identify priority barriers in the watershed, two assumptions are made: 1) any modelled (i.e., passability status is unknown) or partial barriers are treated as complete barriers to passage and 2) the habitat modelling is binary, it does not assign any habitat quality values. As such, the current connectivity status will be refined over time as more data on habitat and barriers are collected. For more detail on how the connectivity status assessments were conducted, see [data methods](content/data-methods.qmd).


```{python}
#| echo: false
#| warning: false

import requests
import json
import pandas

def barrier_extent(barrier_type):

    request = 'https://cabd-pro.cwf-fcf.org/bcfishpass/functions/postgisftw.wcrp_barrier_extent/items.json?watershed_group_code=LNIC&barrier_type=' + barrier_type

    response_api = requests.get(request)
    parse = response_api.text
    result = json.loads(parse)

    blocked_km = result[0]['all_habitat_blocked_km']
    blocked_pct = result[0]['extent_pct']

    return blocked_km, blocked_pct

def barrier_count(barrier_type):
    request = 'https://cabd-pro.cwf-fcf.org/bcfishpass/functions/postgisftw.wcrp_barrier_count/items.json?watershed_group_code=LNIC&barrier_type=' + barrier_type

    response_api = requests.get(request)
    parse = response_api.text
    result = json.loads(parse)

    n_passable = result[0]['n_passable']
    n_barrier = result[0]['n_barrier']
    n_potential = result[0]['n_potential']
    n_unknown = result[0]['n_unknown']

    sum_bar = (n_passable, n_barrier, n_potential, n_unknown)

    return n_passable, n_barrier, n_potential, n_unknown, sum(sum_bar)

def barrier_severity(barrier_type):

    request = 'https://cabd-pro.cwf-fcf.org/bcfishpass/functions/postgisftw.wcrp_barrier_severity/items.json?watershed_group_code=LNIC&barrier_type=' + barrier_type

    response_api = requests.get(request)
    parse = response_api.text
    result = json.loads(parse)

    n_assessed_barrier = result[0]['n_assessed_barrier']
    n_assess_total = result[0]['n_assess_total']
    pct_assessed_barrier = result[0]['pct_assessed_barrier']

    return n_assessed_barrier, n_assess_total, pct_assessed_barrier

def watershed_connectivity(habitat_type):

    request = 'https://cabd-pro.cwf-fcf.org/bcfishpass/functions/postgisftw.wcrp_habitat_connectivity_status/items.json?watershed_group_code=LNIC&habitat_type=' + habitat_type

    response_api = requests.get(request)
    parse = response_api.text
    result = json.loads(parse)

    connect_stat = result[0]['connectivity_status']

    return str(round(connect_stat))

num_dam = barrier_severity('DAM')[1]
km_dam = barrier_extent('DAM')[0]
pct_dam = barrier_extent('DAM')[1]
resource_km = barrier_extent('ROAD, RESOURCE/OTHER')[0]
resource_pct = round(barrier_extent('ROAD, RESOURCE/OTHER')[1])
demo_km = barrier_extent('ROAD, DEMOGRAPHIC')[0]
demo_pct = round(barrier_extent('ROAD, DEMOGRAPHIC')[1])
resource_sev = round(barrier_severity('ROAD, RESOURCE/OTHER')[2])
demo_sev = round(barrier_severity('ROAD, DEMOGRAPHIC')[2])
sum_road = barrier_severity('ROAD, RESOURCE/OTHER')[1] + barrier_severity('ROAD, DEMOGRAPHIC')[1]

```

```{python echo=FALSE}
#| warning: false
#| echo: false

#| label: tbl-connectivity
#| tbl-cap: "Connectivity status assessment for thermal refuge (a), spawning (b), and rearing (c) habitat in the Lower Nicola River watershed. The Accessible Spawning Habitat and Accessible Rearing Habitat KEAs are evaluated by dividing the length of linear habitat (of each type) that is currently accessible to target species by the total length of all linear habitat (of each type) in the watershed."
#| warning: false
#| echo: false


#creating table 7
import pandas as pd
import numpy as np
import matplotlib as mpl
import warnings

warnings.filterwarnings('ignore')

df = pd.DataFrame({"Target Species":["Andromous Salmon",""],
                   "KEA":["Available off-channel Thermal Refuge",""],
                   "Indicator":["Total Area (m2) of off-channel thermal refuge accessible","Current Status:"],
                   "Poor":["?",""],
                   "Fair":[" ?",""],
                   "Good":["? ",""],
                   "Very Good":[" ? ",""]
                   })

def highlighttab7b(val):
    red = '#ff0000;'
    yellow = '#ffff00;'
    lgreen = '#92d050;'
    dgreen = '#03853e;'

    if val=="?" : color = red
    elif val[0:].isdigit() and int(val) < 80 : color = red
    elif val==" ?": color = yellow
    elif val=="? "  : color = lgreen
    elif val[0:].isdigit() and (int(val) >= 80 and int(val) < 90) : color = lgreen 
    elif val ==" ? ": color = dgreen
    elif val[0:].isdigit() and int(val) >= 90 : color = dgreen 
    elif val == "Current Status:" : return "font-weight: bold"
    else: color = 'white'
    return 'background-color: %s' % color

df.style.applymap(highlighttab7b).set_table_styles(
   [{
       'selector': 'th',
       'props': [('background-color', '#008270'),('text-align', 'left')]
   }]).hide()


```
**Comments:** No baseline data exists on the extent of overwintering habitat in the watershed. A priority action is included in the Operational Plan (strategy 2.3) to develop a habitat layer, and this will be used to inform this connectivity status assessment in the future.

```{python echo=FALSE}

import pandas as pd
import numpy as np
import matplotlib as mpl


warnings.filterwarnings('ignore')

df = pd.DataFrame({"Target Species":["Target Species"," "],
                   "KEA":["Available Spawning Habitat"," "],
                   "Indicator":["% of total linear spawning habitat accessible","Current Status:"],
                   "Poor":["<25%"," "],
                   "Fair":["25-50%"," "],
                   "Good":["51-75%"," "],
                   "Very Good":[">75%", watershed_connectivity("SPAWNING")]
                   })


def highlighttab7(val):
    red = '#ff0000;'
    yellow = '#ffff00;'
    lgreen = '#92d050;'
    dgreen = '#03853e;'

    if val=="<25%" : color = red
    elif val[0:].isdigit() and int(val) <25 : color = red
    elif val=="25-50%": color = yellow
    elif val[0:].isdigit() and (int(val) >= 25 and int(val) < 50) : color = yellow
    elif val=="51-75%"  : color = lgreen
    elif val[0:].isdigit() and (int(val) >= 50 and int(val) < 75) : color = lgreen 
    elif val ==">75%": color = dgreen
    elif val[0:].isdigit() and int(val) >= 75 : color = dgreen 
    elif val == "Current Status:" : return "font-weight: bold"
    else: color = 'white'
    return 'background-color: %s' % color

df.style.applymap(highlighttab7).set_table_styles(
   [{
       'selector': 'th',
       'props': [('background-color', '#008270'),('text-align', 'left')]
   }]).hide()
   
```

**Comments:** Indicator rating definitions are based on the consensus decisions of the planning team, including the decision not to define Fair. The current status is based on the CWF Barrier Prioritization Model output, which is current as of March 2022.

```{python echo=FALSE}
import pandas as pd
import numpy as np
import matplotlib as mpl


warnings.filterwarnings('ignore')

df = pd.DataFrame({"Target Species":["Anadromous Salmonids"," "],
                   "KEA":["Available Rearing Habitat"," "],
                   "Indicator":["% of total linear rearing habitat accessible","Current Status:"],
                   "Poor":["<25%"," "],
                   "Fair":["25-50%"," "],
                   "Good":["51-75%"," "],
                   "Very Good":[">75%", watershed_connectivity("REARING")]
                   })


def highlighttab7(val):
    red = '#ff0000;'
    yellow = '#ffff00;'
    lgreen = '#92d050;'
    dgreen = '#03853e;'

    if val=="<25%" : color = red
    elif val[0:].isdigit() and int(val) <25 : color = red
    elif val=="25-50%": color = yellow
    elif val[0:].isdigit() and (int(val) >= 25 and int(val) < 50) : color = yellow
    elif val=="51-75%"  : color = lgreen
    elif val[0:].isdigit() and (int(val) >= 50 and int(val) < 75) : color = lgreen 
    elif val ==">75%": color = dgreen
    elif val[0:].isdigit() and int(val) >= 75 : color = dgreen 
    elif val == "Current Status:" : return "font-weight: bold"
    else: color = 'white'
    return 'background-color: %s' % color

df.style.applymap(highlighttab7).set_table_styles(
   [{
       'selector': 'th',
       'props': [('background-color', '#008270'),('text-align', 'left')]
   }]).hide()
```





## Goals {-}

```{python echo=FALSE}
#| label: tbl-goals
#| tbl-cap: "Goals to improve (1) off-channel thermal refuge, (2) spawning, and (3) rearing habitat connectivity for target species in the Lower Nicola River watershed over the lifespan of the WCRP (2021-2031). The goals were established through discussions with the planning team and represent the resulting desired state of connectivity in the watershed. The goals are subject to change as more information and data are collected over the course of the plan timeline (e.g., the current connectivity status is updated based on barrier field assessments)."
#| warning: false
#| echo: false

#creating table 7
import warnings

warnings.filterwarnings('ignore')
import pandas as pd
import numpy as np

df = pd.DataFrame({"Goal #": [1,2,3],
                   "Goal": ["By 2031, the total area of groundwater-serviced off-channel thermal refuge accessible to anadromous salmonids will increase by 6,000 m2 within the Lower Nicola River watershed. ",
                            "By 2025, the % of total linear spawning habitat accessible to anadromous salmonids will not decrease below 84% within the Lower Nicola River watershed.  ",
                            "By 2031, the % of total linear rearing habitat accessible to anadromous salmonids will increase from 81% to 90% within the Lower Nicola River watershed." ]
                    })

data = df.style.hide().set_properties(**{'text-align': 'left'})

data.set_table_styles(
   [{
       'selector': 'th',
       'props': [('background-color', '#008270'),('text-align', 'left')]
   }])

```



```{r echo=FALSE}
#| echo: false
#| include: true
#| warning: false

library(reticulate)


num_dam <- py$num_dam
km_dam <- py$km_dam
pct_dam <- py$pct_dam
resource_km <- py$resource_km
resource_pct <- py$resource_pct
demo_km <- py$demo_km
demo_pct <- py$demo_pct
resource_sev <- py$resource_sev
demo_sev <- py$demo_sev
sum_road <- py$sum_road

```


